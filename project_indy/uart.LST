C51 COMPILER V9.02   UART                                                                  05/05/2016 11:18:01 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN uart.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE uart.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "uart.h"
   2          
   3          bit   busy,busy2;
   4          xdata uint8 rec_data[500];
   5          uint16 rec_num;
   6          xdata   uint8   uart2_rec_data[20];
   7          uint8   uart2_rec_cnt = 0;
   8          void UartInit(void)              
   9          {
  10   1              ACC = P_SW1;
  11   1          ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
  12   1          P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
  13   1          
  14   1      //  ACC = P_SW1;
  15   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=1 S1_S1=0
  16   1      //  ACC |= S1_S0;               //(P3.6/RxD_2, P3.7/TxD_2)
  17   1      //  P_SW1 = ACC;  
  18   1      //  
  19   1      //  ACC = P_SW1;
  20   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=1
  21   1      //  ACC |= S1_S1;               //(P1.6/RxD_3, P1.7/TxD_3)
  22   1      //  P_SW1 = ACC;  
  23   1      
  24   1              PCON &= 0x7F;           //波特率不倍速
  25   1              SCON = 0x50;            //8位数据,可变波特率
  26   1              AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
  27   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
  28   1              TMOD &= 0x0F;           //清除定时器1模式位
  29   1              TMOD |= 0x20;           //设定定时器1为8位自动重装方式
  30   1              TL1 = 0xFA;             //设定定时初值
  31   1              TH1 = 0xFA;             //设定定时器重装值
  32   1              ET1 = 0;                //禁止定时器1中断
  33   1              TR1 = 1;                //启动定时器1
  34   1          ES = 1;                     //使能串口中断
  35   1          EA = 1;
  36   1      
  37   1      }
  38          
  39          
  40          /*----------------------------Send a byte data to UART
  41          Input: dat (data to be sent)
  42          Output:None
  43          ----------------------------*/
  44          void SendData(unsigned char dat)
  45          {
  46   1              while (busy);    //Wait for the completion of the previous data is sent
  47   1              ACC = dat;    //Calculate the even parity bit P (PSW.0)
  48   1              if (P)    //Set the parity bit according to P
  49   1              {
  50   2                      #if (PARITYBIT == ODD_PARITY)
                              TB8 = 0;    //Set parity bit to 0
                              #elif (PARITYBIT == EVEN_PARITY)
                              TB8 = 1;    //Set parity bit to 1
                              #endif
  55   2              }
C51 COMPILER V9.02   UART                                                                  05/05/2016 11:18:01 PAGE 2   

  56   1              else
  57   1              {
  58   2                      #if (PARITYBIT == ODD_PARITY)
                              TB8 = 1;    //Set parity bit to 1
                              #elif (PARITYBIT == EVEN_PARITY)
                              TB8 = 0;    //Set parity bit to 0
                              #endif
  63   2              }
  64   1              busy = 1;
  65   1              SBUF = ACC;    //Send data to UART buffer
  66   1      }
  67             
  68          /*----------------------------Send a string to UART
  69          Input: s (address of string)
  70          Output:None
  71          ----------------------------*/
  72          
  73          void SendString(char *s)
  74          {
  75   1              while (*s)    //Check the end of the string
  76   1              {
  77   2                      SendData(*s++);    //Send current char and increment string ptr
  78   2              }
  79   1      }
  80          
  81          /*----------------------------UART interrupt service routine
  82          ----------------------------*/
  83          void Uart_Isr() interrupt 4 using 1
  84          {
  85   1      if (RI)
  86   1              {
  87   2                      RI = 0;    //Clear receive interrupt flag
  88   2                      rec_data[rec_num++] = SBUF;    //P0 show UART data
  89   2                      //bit9 = RB8;    //P2.2 show parity bit
  90   2      
  91   2              }
  92   1      if (TI)
  93   1              {
  94   2                      TI = 0;    //Clear transmit interrupt flag
  95   2                      busy = 0;    //Clear transmit busy flag
  96   2              }
  97   1      }
  98          
  99          
 100          /*----------------------------UART2 interrupt service routine
 101          ----------------------------*/
 102          void Uart2() interrupt 8 using 1
 103          {
 104   1              if (S2CON & S2RI)
 105   1              {
 106   2                      S2CON &= ~S2RI;    //Clear receive interrupt flag
 107   2              uart2_rec_data[uart2_rec_cnt++] = S2BUF;
 108   2      
 109   2              }
 110   1              if (S2CON & S2TI)
 111   1              {
 112   2                      S2CON &= ~S2TI;    //Clear transmit interrupt flag
 113   2                      busy2 = 0;    //Clear transmit busy flag
 114   2              }
 115   1      }
 116          /*----------------------------Send a byte data to UART
 117          Input: dat (data to be sent)
C51 COMPILER V9.02   UART                                                                  05/05/2016 11:18:01 PAGE 3   

 118          Output:None
 119          ----------------------------*/
 120          void SendData2(BYTE dat)
 121          {
 122   1              while (busy2);    //Wait for the completion of the previous data is sent
 123   1              ACC = dat;    //Calculate the even parity bit P (PSW.0)
 124   1              if (P)    //Set the parity bit according to P
 125   1              {
 126   2              #if (PARITYBIT == ODD_PARITY)
                      S2CON &= ~S2TB8;    //Set parity bit to 0
                      #elif (PARITYBIT == EVEN_PARITY)
                      S2CON |= S2TB8;    //Set parity bit to 1
                      #endif
 131   2          }
 132   1          else
 133   1          {
 134   2              #if (PARITYBIT == ODD_PARITY)
                      S2CON |= S2TB8;    //Set parity bit to 1
                      #elif (PARITYBIT == EVEN_PARITY)
                      S2CON &= ~S2TB8;    //Set parity bit to 0
                      #endif
 139   2          }
 140   1          busy2 = 1;
 141   1          S2BUF = ACC;    //Send data to UART2 buffer
 142   1      }
 143          
 144          
 145          /*----------------------------Send a string to UART
 146          Input: s (address of string)
 147          Output:None
 148          ----------------------------*/
 149          
 150          void SendString2(char *s)
 151          {
 152   1              while (*s)    //Check the end of the string
 153   1              {
 154   2                      SendData2(*s++);    //Send current char and increment string ptr
 155   2              }
 156   1      }
 157          
 158          
 159          void UartInit2()
 160          {
 161   1              
 162   1          P_SW2 &= ~S2_S0;            //S2_S0=0 (P1.0/RxD2, P1.1/TxD2)
 163   1      //  P_SW2 |= S2_S0;             //S2_S0=1 (P4.6/RxD2_2, P4.7/TxD2_2)
 164   1      
 165   1      //      S2CON = 0x50;           //8位数据,可变波特率
 166   1      //      AUXR |= 0x04;           //定时器2时钟为Fosc,即1T
 167   1      //      T2L = 0xD0;             //设定定时初值
 168   1      //      T2H = 0xFF;             //设定定时初值
 169   1      //      AUXR |= 0x10;           //启动定时器2
 170   1      
 171   1              S2CON = 0x50;           //8位数据,可变波特率
 172   1              AUXR |= 0x04;           //定时器2时钟为Fosc,即1T
 173   1              T2L = 0xC0;             //设定定时初值
 174   1              T2H = 0xFD;             //设定定时初值
 175   1              AUXR |= 0x10;           //启动定时器2
 176   1      
 177   1          IE2 = 0x01;                 //使能串口2中断
 178   1          EA = 1;
 179   1      }
C51 COMPILER V9.02   UART                                                                  05/05/2016 11:18:01 PAGE 4   

 180          
 181          
 182          void clear_rec_data()     //清空接收数据
 183          {
 184   1              uint16 i;
 185   1              for(i=0;i<500;i++)
 186   1                        rec_data[i] = 0;
 187   1              rec_num = 0;
 188   1      }
 189          
 190          void clear_uart2_data()
 191          {
 192   1          char    i;
 193   1        
 194   1          for(i = 0;i < 100;i++)
 195   1          {
 196   2              uart2_rec_data[i] = 0;
 197   2          }
 198   1          uart2_rec_cnt = 0 ;
 199   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    340    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    523       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
