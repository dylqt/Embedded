C51 COMPILER V9.52.0.0   STC15_FLASH                                                       06/08/2016 14:58:02 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE STC15_FLASH
OBJECT MODULE PLACED IN stc15_flash.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE stc15_flash.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "stc15_flash.h"
   2          
   3          //-----------------------------------------------
   4          
   5          #define CMD_IDLE    0               //空闲模式
   6          #define CMD_READ    1               //IAP字节读命令
   7          #define CMD_PROGRAM 2               //IAP字节编程命令
   8          #define CMD_ERASE   3               //IAP扇区擦除命令
   9          
  10          
  11          //#define ENABLE_IAP 0x80           //if SYSCLK<30MHz
  12          #define ENABLE_IAP 0x81           //if SYSCLK<24MHz
  13          //#define ENABLE_IAP  0x82            //if SYSCLK<20MHz
  14          //#define ENABLE_IAP 0x83           //if SYSCLK<12MHz
  15          //#define ENABLE_IAP 0x84           //if SYSCLK<6MHz
  16          //#define ENABLE_IAP 0x85           //if SYSCLK<3MHz
  17          //#define ENABLE_IAP 0x86           //if SYSCLK<2MHz
  18          //#define ENABLE_IAP 0x87           //if SYSCLK<1MHz
  19          
  20          //测试地址
  21          #define IAP_ADDRESS 0x0400
  22          
  23          
  24          BYTE TBUF,RBUF;
  25          BYTE TDAT,RDAT;
  26          BYTE TCNT,RCNT;
  27          BYTE TBIT,RBIT;
  28          BOOL TING,RING;
  29          BOOL TEND,REND;
  30          
  31          
  32          //#define USED_BYTE_QTY_IN_ONE_SECTOR   1
  33          //#define USED_BYTE_QTY_IN_ONE_SECTOR   2
  34          //#define USED_BYTE_QTY_IN_ONE_SECTOR   4
  35          //#define USED_BYTE_QTY_IN_ONE_SECTOR   8
  36          //#define USED_BYTE_QTY_IN_ONE_SECTOR   16
  37          #define USED_BYTE_QTY_IN_ONE_SECTOR     32      //由于STC15F104W只有128字节RAM,所有缓冲区不可定义太大
  38          //#define USED_BYTE_QTY_IN_ONE_SECTOR   64
  39          
  40          #define DEBUG_Data_Memory_Begin_Sector_addr     0x0400
  41          
  42          BYTE idata protect_buffer[USED_BYTE_QTY_IN_ONE_SECTOR];
  43          
  44          /*----------------------------
  45          关闭IAP
  46          ----------------------------*/
  47          void IapIdle()
  48          {
  49   1          IAP_CONTR = 0;                  //关闭IAP功能
  50   1          IAP_CMD = 0;                    //清除命令寄存器
  51   1          IAP_TRIG = 0;                   //清除触发寄存器
  52   1          IAP_ADDRH = 0x80;               //将地址设置到非IAP区域
  53   1          IAP_ADDRL = 0;
  54   1      }
  55          
C51 COMPILER V9.52.0.0   STC15_FLASH                                                       06/08/2016 14:58:02 PAGE 2   

  56          /*----------------------------
  57          从ISP/IAP/EEPROM区域读取一字节
  58          ----------------------------*/
  59          BYTE IapReadByte(WORD addr)
  60          {
  61   1          BYTE dat;                       //数据缓冲区
  62   1      
  63   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  64   1          IAP_CMD = CMD_READ;             //设置IAP命令
  65   1          IAP_ADDRL = addr;               //设置IAP低地址
  66   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
  67   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
  68   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
  69   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
  70   1          dat = IAP_DATA;                 //读ISP/IAP/EEPROM数据
  71   1          IapIdle();                      //关闭IAP功能
  72   1      
  73   1          return dat;                     //返回
  74   1      }
  75          
  76          /*----------------------------
  77          写一字节数据到ISP/IAP/EEPROM区域
  78          ----------------------------*/
  79          void IapProgramByte(WORD addr, BYTE dat)
  80          {
  81   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  82   1          IAP_CMD = CMD_PROGRAM;          //设置IAP命令
  83   1          IAP_ADDRL = addr;               //设置IAP低地址
  84   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
  85   1          IAP_DATA = dat;                 //写ISP/IAP/EEPROM数据
  86   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
  87   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
  88   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
  89   1          IapIdle();
  90   1      }
  91          
  92          /*----------------------------
  93          扇区擦除
  94          ----------------------------*/
  95          void IapEraseSector(WORD addr)
  96          {
  97   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  98   1          IAP_CMD = CMD_ERASE;            //设置IAP命令
  99   1          IAP_ADDRL = addr;               //设置IAP低地址
 100   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
 101   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
 102   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
 103   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
 104   1          IapIdle();
 105   1      }
 106          
 107          /* 写数据进 数据Flash存储器, 只在同一个扇区内写，不保留原有数据 */
 108          /* begin_addr,被写数据Flash开始地址；counter,连续写多少个字节； array[]，数据来源   */
 109          BYTE sequential_write_flash_in_one_sector(WORD begin_addr, WORD counter, BYTE array[])
 110          {
 111   1          WORD i = 0;
 112   1          WORD in_sector_begin_addr = 0;
 113   1          WORD sector_addr = 0;
 114   1      
 115   1          /* 判是否是有效范围,此函数不允许跨扇区操作 */
 116   1          if(counter > USED_BYTE_QTY_IN_ONE_SECTOR)
 117   1              return  ERROR;
C51 COMPILER V9.52.0.0   STC15_FLASH                                                       06/08/2016 14:58:02 PAGE 3   

 118   1          in_sector_begin_addr = begin_addr & 0x01ff;
 119   1          if((in_sector_begin_addr + counter) > USED_BYTE_QTY_IN_ONE_SECTOR)
 120   1              return ERROR;
 121   1      
 122   1          /* 擦除 要修改/写入 的扇区 */
 123   1          IapEraseSector(begin_addr);
 124   1      
 125   1          for(i=0; i<counter; i++)
 126   1          {
 127   2              /* 写一个字节 */
 128   2              IapProgramByte(begin_addr, array[i]);
 129   2              /*  比较对错 */
 130   2              if (IapReadByte(begin_addr) != array[i])
 131   2              {
 132   3                  IapIdle();
 133   3                  return ERROR;
 134   3              }
 135   2              begin_addr++;
 136   2          }
 137   1          IapIdle();
 138   1          return  OK;
 139   1      }
 140          
 141          /* 写数据进数据Flash存储器(EEPROM), 只在同一个扇区内写，保留同一扇区中不需修改的数据    */
 142          /* begin_addr,被写数据Flash开始地址；counter,连续写多少个字节； array[]，数据来源       */
 143          BYTE write_flash_with_protect_in_one_sector(WORD begin_addr, WORD counter, BYTE array[])
 144          {
 145   1          WORD i = 0;
 146   1          WORD in_sector_begin_addr = 0;
 147   1          WORD sector_addr = 0;
 148   1          WORD byte_addr = 0;
 149   1      
 150   1          /* 判是否是有效范围,此函数不允许跨扇区操作 */
 151   1          if(counter > USED_BYTE_QTY_IN_ONE_SECTOR)
 152   1              return ERROR;
 153   1          in_sector_begin_addr = begin_addr & 0x01ff;
 154   1          /* 假定从扇区的第0个字节开始，到USED_BYTE_QTY_IN_ONE_SECTOR-1个字节结束,后面部分不用,程序易编写 */
 155   1          if((in_sector_begin_addr + counter) > USED_BYTE_QTY_IN_ONE_SECTOR)
 156   1              return ERROR;
 157   1      
 158   1          /* 将该扇区数据 0 - (USED_BYTE_QTY_IN_ONE_SECTOR-1) 字节数据读入缓冲区保护 */
 159   1          sector_addr = (begin_addr & 0xfe00);
 160   1          byte_addr = sector_addr;
 161   1      
 162   1          for(i = 0; i < USED_BYTE_QTY_IN_ONE_SECTOR; i++)
 163   1          {
 164   2              protect_buffer[i] = IapReadByte(byte_addr++);
 165   2          }
 166   1      
 167   1          /* 将要写入的数据写入保护缓冲区的相应区域,其余部分保留 */
 168   1          for(i = 0; i < counter; i++)
 169   1          {
 170   2              protect_buffer[in_sector_begin_addr++] = array[i];
 171   2          }
 172   1      
 173   1          /* 擦除 要修改/写入 的扇区 */
 174   1          IapEraseSector(sector_addr);
 175   1      
 176   1          /* 将保护缓冲区的数据写入 Data Flash, EEPROM */
 177   1          byte_addr = sector_addr;
 178   1          for(i = 0; i< USED_BYTE_QTY_IN_ONE_SECTOR; i++)
 179   1          {
C51 COMPILER V9.52.0.0   STC15_FLASH                                                       06/08/2016 14:58:02 PAGE 4   

 180   2              /* 写一个字节 */
 181   2              IapProgramByte(byte_addr, protect_buffer[i]);
 182   2              /*  比较对错 */
 183   2              if (IapReadByte(begin_addr) != protect_buffer[i])
 184   2              {
 185   3                  IapIdle();
 186   3                  return ERROR;
 187   3              }
 188   2              byte_addr++;
 189   2          }
 190   1          IapIdle();
 191   1          return OK;
 192   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    705    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     32    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
