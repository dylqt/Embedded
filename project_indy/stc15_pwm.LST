C51 COMPILER V9.52.0.0   STC15_PWM                                                         06/08/2016 14:58:02 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE STC15_PWM
OBJECT MODULE PLACED IN stc15_pwm.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE stc15_pwm.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "stc15_pwm.h"
   2          //#include "stc15_time.h"
   3          #include "stc15_int.h"
   4          #define CCP_S0 0x10                 //P_SW1.4
   5          #define CCP_S1 0x20                 //P_SW1.5
   6          
   7          #define SYSC12 0x00         // 系统时钟 SYSclk/12
   8          #define SYSC2  0x02         // 系统时钟 SYSclk/2
   9          #define SYSC   0x08         // 系统时钟 SYSclk
  10          #define SYSC4  0x0a         // 系统时钟 SYSclk/4
  11          #define SYSC6  0x0c         // 系统时钟 SYSclk/6
  12          #define SYSC8  0x0f         // 系统时钟 SYSclk/8
  13          #define SYSCT0 0x04         // 系统时钟 T0溢出
  14          #define SYSCECI 0x06        // 系统时钟 ETI/P1.2
  15          
  16          
  17          unsigned char upTime;
  18          unsigned char downTime;
  19          unsigned char pwm2_state;
  20          unsigned char key_state;
  21          unsigned char OLED_BRT_DUTY = 50;
  22          void GetPwm()
  23          {
  24   1        ACC = P_SW1;
  25   1          ACC &= ~(CCP_S0 | CCP_S1);      //CCP_S0=0 CCP_S1=0
  26   1          P_SW1 = ACC;                    //(P1.2/ECI, P1.1/CCP0, P1.0/CCP1, P3.7/CCP2)
  27   1          
  28   1      //  ACC = P_SW1;
  29   1      //  ACC &= ~(CCP_S0 | CCP_S1);      //CCP_S0=1 CCP_S1=0
  30   1      //  ACC |= CCP_S0;                  //(P3.4/ECI_2, P3.5/CCP0_2, P3.6/CCP1_2, P3.7/CCP2_2)
  31   1      //  P_SW1 = ACC;  
  32   1      //  
  33   1      //  ACC = P_SW1;
  34   1      //  ACC &= ~(CCP_S0 | CCP_S1);      //CCP_S0=0 CCP_S1=1
  35   1      //  ACC |= CCP_S1;                  //(P2.4/ECI_3, P2.5/CCP0_3, P2.6/CCP1_3, P2.7/CCP2_3)
  36   1      //  P_SW1 = ACC;  
  37   1      
  38   1          CCON = 0;                       //初始化PCA控制寄存器
  39   1                                          //PCA定时器停止
  40   1                                          //清除CF标志
  41   1                                          //清除模块中断标志
  42   1          CL = 0;                         //复位PCA寄存器
  43   1          CH = 0;
  44   1          CMOD = SYSC2;                    //设置PCA时钟源
  45   1                                          //禁止PCA定时器溢出中断
  46   1          PCA_PWM0 = 0x00;                //PCA模块0工作于8位PWM
  47   1          CCAP0H = CCAP0L = 0x20;         //PWM0的占空比为87.5% ((100H-20H)/100H) ---> CCAPOL = 256 - 占空比 * 2
             -56
  48   1          CCAPM0 = 0x42;                  //PCA模块0为8位PWM模式
  49   1      
  50   1          PCA_PWM1 = 0x40;                //PCA模块1工作于7位PWM
  51   1          CCAP1H = CCAP1L = 0x20;         //PWM1的占空比为75% ((80H-20H)/80H)
  52   1          CCAPM1 = 0x42;                  //PCA模块1为7位PWM模式
  53   1      
  54   1          PCA_PWM2 = 0x80;                //PCA模块2工作于6位PWM
C51 COMPILER V9.52.0.0   STC15_PWM                                                         06/08/2016 14:58:02 PAGE 2   

  55   1          CCAP2H = CCAP2L = 0x20;         //PWM2的占空比为50% ((40H-20H)/40H)
  56   1          CCAPM2 = 0x42;                  //PCA模块2为6位PWM模式
  57   1      
  58   1          CR = 1;                         //PCA定时器开始工作
  59   1      }
  60          
  61          
  62          /*---------------------------------------------------------------------*/
  63          /* --- STC MCU Limited ------------------------------------------------*/
  64          /* --- STC15Fxx 系列 输出任意周期和任意占空比的PWM实例-----------------*/
  65          
  66          // 周期时间的计算 : CYCLE / Fosc
  67          #define CYCLE 1000L
  68          sfr PIN_SW2 =   0xba;
  69          
  70          /*
  71          功能: P4.4输出PWM波
  72          输入:
  73            DUTY : 占空比
  74            10 : 10%
  75          */
  76          void GetPwm4(unsigned char DUTY)
  77          {
  78   1      
  79   1          P4M0 = 0x00;
  80   1          P4M1 = 0x00;  // 设置端口模式为准双向口
  81   1          
  82   1          PIN_SW2 |= 0x80;                //使能访问XSFR
  83   1          PWMCFG = 0x00;                  //配置PWM的输出初始电平为低电平
  84   1          PWMCKS = 0x00;                  //选择PWM的时钟为Fosc/(0+1)
  85   1          PWMC = CYCLE;                   //设置PWM周期
  86   1          PWM4T1 = 0x0000;                //设置PWM4第1次反转的PWM计数
  87   1          PWM4T2 = CYCLE * DUTY / 100;    //设置PWM4第2次反转的PWM计数
  88   1                                          //占空比为(PWM2T2-PWM2T1)/PWMC
  89   1          PWM4CR = 0x08;                  //选择PWM4输出到P4.4,不使能PWM4中断
  90   1      
  91   1        
  92   1        PWMCR |= 0x04;          //使能PWM4信号输出
  93   1          PWMCR |= 0x80;                  //使能PWM模块
  94   1          PIN_SW2 &= ~0x80;
  95   1      
  96   1          while (1);
  97   1      }
  98          
  99          
 100          /*
 101          功能: P4.2输出PWM波
 102          输入:
 103            DUTY : 占空比
 104            10 : 10%
 105          */
 106          void GetPwm5(unsigned char DUTY)
 107          {
 108   1        P5M0 = 0x00;
 109   1          P5M1 = 0x00;  // 设置端口模式为准双向口
 110   1      
 111   1        PIN_SW2 |= 0x80;                //使能访问XSFR
 112   1          PWMCFG = 0x00;                  //配置PWM的输出初始电平为低电平
 113   1        PWMCKS = 0x00;                  //选择PWM的时钟为Fosc/(0+1)
 114   1        PWMC = CYCLE;                   //设置PWM周期     
 115   1        PWM5T1 = 0x0000;        //设置PWM5第1次反转的PWM计数
 116   1        PWM5T2 = CYCLE * DUTY / 100;    //设置PWM5第2次反转的PWM计数
C51 COMPILER V9.52.0.0   STC15_PWM                                                         06/08/2016 14:58:02 PAGE 3   

 117   1                        //占空比为(PWM2T2-PWM2T1)/PWMC
 118   1        PWM5CR = 0x08;                  //选择PWM5输出到P4.2,不使能PWM5中断
 119   1      
 120   1        PWMCR |= 0x08;          //使能PWM5信号输出
 121   1        PWMCR |= 0x80;                  //使能PWM模块
 122   1        PIN_SW2 &= ~0x80;
 123   1      }
 124          
 125          
 126          /*
 127          功能: P2.0输出PWM波，通过定时器3, 频率100HZ
 128          输入:
 129            DUTY : 占空比
 130            10 : 10%
 131          */
 132          void GetPwm2(unsigned char DUTY)
 133          {
 134   1        //unsigned char allTime = 200; // 100hz 所以一个周期时间为10ms
 135   1        unsigned int upTime = 100 * DUTY; // 10000us * DUTY /100 = 100 * DUTY
 136   1        unsigned int downTime = 10000 - upTime;
 137   1      
 138   1        pwm2_state = 0;
 139   1        t3IntInit();
 140   1      }
 141          
 142          //中断服务程序
 143          void t3int() interrupt 19           //中断入口
 144          {
 145   1          if(pwm2_state == 0){
 146   2              T3L = (65536 - (FOSC / 1200000 * upTime));    //设置定时初值
 147   2            T3H = (65536 - (FOSC / 1200000 * upTime)) >> 8;   //设置定时初值
 148   2            P20 = 1;
 149   2            pwm2_state = 1;
 150   2          }
 151   1          else{
 152   2            T3L = (65536 - (FOSC / 1200000 * downTime));    //设置定时初值
 153   2            T3H = (65536 - (FOSC / 1200000 * downTime)) >> 8;   //设置定时初值
 154   2            P20 = 0;
 155   2            pwm2_state = 0;
 156   2          }
 157   1      }
 158          
 159          
 160          
 161          /*
 162          功能: P0^6 PWM7_2输出PWM波  
 163          输入:
 164            FRE  : 频率
 165            0 :  300HZ
 166            1 :  500HZ
 167            2 :  1KHZ
 168            3 :  2KHZ
 169            4 :  4KHZ
 170            其他:  2KHZ
 171            
 172            DUTY : 占空比
 173            10 : 10%
 174          */
 175          void GetPwmBZ(unsigned char FRE, unsigned int DUTY)
 176          {
 177   1        float cycle = 0;
 178   1        switch(FRE){    //cycle / FRE = 1 / FOSC ;cycle 最大为32767
C51 COMPILER V9.52.0.0   STC15_PWM                                                         06/08/2016 14:58:02 PAGE 4   

 179   2          case 0:     // 300HZ
 180   2            cycle = 18432;
 181   2            break;
 182   2          case 1:     // 500HZ
 183   2            cycle = 11059;
 184   2            break;
 185   2          case 2:     // 1KHZ
 186   2            cycle = 5529;
 187   2            break;
 188   2          case 3:     // 2KHZ
 189   2            cycle = 2765;
 190   2            break;
 191   2          case 4:     // 4KHZ
 192   2            cycle = 1382;
 193   2            break;
 194   2          default:
 195   2            cycle = 2765;
 196   2            break;
 197   2        }
 198   1          P0M0 &= ~(1 << 6);
 199   1          P0M1 &= ~(1 << 6);  // 设置端口模式为准双向口
 200   1          
 201   1          PIN_SW2 |= 0x80;                //使能访问XSFR
 202   1          PWMCFG = 0x00;                  //配置PWM的输出初始电平为低电平
 203   1          PWMCKS = 0x03;                  //选择PWM的时钟为Fosc/(3+1)
 204   1          PWMC = cycle;                   //设置PWM周期
 205   1          PWM7T1 = 0x0000;                //设置PWM7第1次反转的PWM计数
 206   1          PWM7T2 = cycle / 100 * DUTY;    //设置PWM7第2次反转的PWM计数
 207   1                                          //占空比为(PWM2T2-PWM2T1)/PWMC
 208   1          PWM7CR = 0x08;                  //选择PWM7输出到P0.6,不使能PWM7中断
 209   1      
 210   1        
 211   1        PWMCR |= 0x20;          //使能PWM7信号输出
 212   1          PWMCR |= 0x80;                  //使能PWM模块
 213   1          PIN_SW2 &= ~0x80;
 214   1      
 215   1      }
 216          
 217          /*
 218          功能: P2^2 PWM4输出PWM波  100HZ
 219          输入:
 220            DUTY : 占空比
 221            10 : 10%
 222          */
 223          void GetPwmBRT(unsigned char DUTY)
 224          {
 225   1        float cycle = 27648;  // cycle = PWMC / (FOSC / ( 7 + 1 ))
 226   1        P2M1 &= ~(1 << 2);
 227   1        P2M1 &= ~(1 << 2);
 228   1      
 229   1      
 230   1        PIN_SW2 |= 0x80;                //使能访问XSFR
 231   1          PWMCFG = 0x00;                  //配置PWM的输出初始电平为低电平
 232   1          PWMCKS = 0x07;                  //选择PWM的时钟为Fosc/(7+1)
 233   1          PWMC = cycle;                   //设置PWM周期   
 234   1          PWM4T1 = 0x0000;                //设置PWM4第1次反转的PWM计数
 235   1          PWM4T2 = cycle / 100 * DUTY;    //设置PWM4第2次反转的PWM计数
 236   1                                          //占空比为(PWM2T2-PWM2T1)/PWMC
 237   1                        
 238   1          PWM4CR = 0x00;                  //选择PWM4输出到P2.2,不使能PWM中断
 239   1        
 240   1        PWMCR |= 0x04;          //使能PWM4信号输出
C51 COMPILER V9.52.0.0   STC15_PWM                                                         06/08/2016 14:58:02 PAGE 5   

 241   1          PWMCR |= 0x80;                  //使能PWM模块
 242   1          PIN_SW2 &= ~0x80;
 243   1        
 244   1      }
 245          
 246          /*
 247          功能: 调节亮度 增加或减少
 248          输入:
 249             way : 1 变亮， -1 变暗
 250             5%  10%  15%   20%  50%  90%
 251          */
 252          void OledBrtAdjust(signed char way)
 253          {
 254   1        switch(OLED_BRT_DUTY){
 255   2          case 5:
 256   2            if(way == 1){
 257   3              OLED_BRT_DUTY = 10;
 258   3              GetPwmBRT(OLED_BRT_DUTY);
 259   3              break;
 260   3              }
 261   2            else 
 262   2              break;
 263   2          case 10:
 264   2            if(way == 1){
 265   3              OLED_BRT_DUTY = 15;
 266   3              GetPwmBRT(OLED_BRT_DUTY);
 267   3              break;
 268   3              }
 269   2            else if(way == -1){
 270   3              OLED_BRT_DUTY = 5;
 271   3              GetPwmBRT(OLED_BRT_DUTY);
 272   3              break;
 273   3              }
 274   2            else 
 275   2              break;
 276   2          case 15:
 277   2            if(way == 1){
 278   3              OLED_BRT_DUTY = 20;
 279   3              GetPwmBRT(OLED_BRT_DUTY);
 280   3              break;
 281   3              }
 282   2            else if(way == -1){
 283   3              OLED_BRT_DUTY = 10;
 284   3              GetPwmBRT(OLED_BRT_DUTY);
 285   3              break;
 286   3              }
 287   2            else 
 288   2              break;
 289   2          case 20:
 290   2            if(way == 1){
 291   3              OLED_BRT_DUTY = 50;
 292   3              GetPwmBRT(OLED_BRT_DUTY);
 293   3              break;
 294   3              }
 295   2            else if(way == -1){
 296   3              OLED_BRT_DUTY = 15;
 297   3              GetPwmBRT(OLED_BRT_DUTY);
 298   3              break;
 299   3              }
 300   2            else 
 301   2              break;
 302   2          case 50 :
C51 COMPILER V9.52.0.0   STC15_PWM                                                         06/08/2016 14:58:02 PAGE 6   

 303   2            if(way == 1){
 304   3              OLED_BRT_DUTY = 90;
 305   3              GetPwmBRT(OLED_BRT_DUTY);
 306   3              break;
 307   3              }
 308   2            else if(way == -1){
 309   3              OLED_BRT_DUTY = 20;
 310   3              GetPwmBRT(OLED_BRT_DUTY);
 311   3              break;
 312   3              }
 313   2            else 
 314   2              break;
 315   2          case 90:
 316   2            if(way == -1){
 317   3              OLED_BRT_DUTY = 50;
 318   3              GetPwmBRT(OLED_BRT_DUTY);
 319   3              break;
 320   3              }
 321   2            else 
 322   2              break;
 323   2          default:
 324   2            break;
 325   2        }
 326   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    942    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
